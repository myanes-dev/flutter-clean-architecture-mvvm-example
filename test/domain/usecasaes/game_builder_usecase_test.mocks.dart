// Mocks generated by Mockito 5.3.2 from annotations
// in flutter_clean_architecture_2022/test/domain/usecasaes/game_builder_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_clean_architecture_2022/domain/models/breed.dart'
    as _i6;
import 'package:flutter_clean_architecture_2022/domain/models/dog.dart' as _i8;
import 'package:flutter_clean_architecture_2022/domain/models/result.dart'
    as _i3;
import 'package:flutter_clean_architecture_2022/domain/repository/dog_repository.dart'
    as _i2;
import 'package:flutter_clean_architecture_2022/domain/usecasaes/breed_list_usecase.dart'
    as _i4;
import 'package:flutter_clean_architecture_2022/domain/usecasaes/dog_random_breed_usecase.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDogRespository_0 extends _i1.SmartFake
    implements _i2.DogRespository {
  _FakeDogRespository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_1<T> extends _i1.SmartFake implements _i3.Result<T> {
  _FakeResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BreedListUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreedListUsecase extends _i1.Mock implements _i4.BreedListUsecase {
  MockBreedListUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DogRespository get dogRespository => (super.noSuchMethod(
        Invocation.getter(#dogRespository),
        returnValue: _FakeDogRespository_0(
          this,
          Invocation.getter(#dogRespository),
        ),
      ) as _i2.DogRespository);
  @override
  _i5.Future<_i3.Result<List<_i6.Breed>>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<_i3.Result<List<_i6.Breed>>>.value(
            _FakeResult_1<List<_i6.Breed>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Result<List<_i6.Breed>>>);
}

/// A class which mocks [DogRandomBreedUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDogRandomBreedUsecase extends _i1.Mock
    implements _i7.DogRandomBreedUsecase {
  MockDogRandomBreedUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DogRespository get dogRespository => (super.noSuchMethod(
        Invocation.getter(#dogRespository),
        returnValue: _FakeDogRespository_0(
          this,
          Invocation.getter(#dogRespository),
        ),
      ) as _i2.DogRespository);
  @override
  _i5.Future<_i3.Result<_i8.Dog>> call({required _i6.Breed? breed}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#breed: breed},
        ),
        returnValue:
            _i5.Future<_i3.Result<_i8.Dog>>.value(_FakeResult_1<_i8.Dog>(
          this,
          Invocation.method(
            #call,
            [],
            {#breed: breed},
          ),
        )),
      ) as _i5.Future<_i3.Result<_i8.Dog>>);
}
